import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from datetime import datetime
from typing import List, Dict
from config import EMAIL_ADDRESS, EMAIL_PASSWORD, RECIPIENT_EMAIL, SMTP_SERVER, SMTP_PORT

class EmailSender:
    def __init__(self):
        self.smtp_server = SMTP_SERVER
        self.smtp_port = SMTP_PORT
        self.email_address = EMAIL_ADDRESS
        self.email_password = EMAIL_PASSWORD
        self.recipient_email = RECIPIENT_EMAIL
    
    def create_html_email(self, articles: List[Dict], intro: str, categories: Dict[str, List[Dict]]) -> str:
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 20px; background-color: #f4f4f4; }}
                .container {{ max-width: 800px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }}
                .header {{ background-color: #2c3e50; color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; margin: -20px -20px 20px -20px; }}
                .intro {{ background-color: #ecf0f1; padding: 15px; border-radius: 5px; margin-bottom: 20px; }}
                .category {{ margin-bottom: 30px; }}
                .category h2 {{ color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 5px; }}
                .article {{ background-color: #f9f9f9; padding: 15px; margin-bottom: 15px; border-radius: 5px; border-left: 4px solid #3498db; }}
                .article h3 {{ margin-top: 0; color: #2c3e50; }}
                .article a {{ color: #3498db; text-decoration: none; }}
                .article a:hover {{ text-decoration: underline; }}
                .source {{ color: #7f8c8d; font-size: 0.9em; margin-top: 10px; }}
                .footer {{ text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #bdc3c7; color: #7f8c8d; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>ðŸ¤– Daily Dose of Tech</h1>
                    <p>AI & Technology News Digest - {datetime.now().strftime('%B %d, %Y')}</p>
                </div>
                
                <div class="intro">
                    <p>{intro}</p>
                </div>
        """
        
        if categories:
            for category_name, category_articles in categories.items():
                if category_articles:
                    html_content += f"""
                    <div class="category">
                        <h2>{category_name}</h2>
                    """
                    
                    for article in category_articles:
                        html_content += f"""
                        <div class="article">
                            <h3><a href="{article['link']}" target="_blank">{article['title']}</a></h3>
                            <p>{article.get('ai_summary', article.get('summary', ''))}</p>
                            <div class="source">Source: {article['source']} | {article.get('published', 'Unknown date')}</div>
                        </div>
                        """
                    
                    html_content += "</div>"
        else:
            html_content += '<div class="category"><h2>Latest AI & Tech News</h2>'
            for article in articles:
                html_content += f"""
                <div class="article">
                    <h3><a href="{article['link']}" target="_blank">{article['title']}</a></h3>
                    <p>{article.get('ai_summary', article.get('summary', ''))}</p>
                    <div class="source">Source: {article['source']} | {article.get('published', 'Unknown date')}</div>
                </div>
                """
            html_content += "</div>"
        
        html_content += """
                <div class="footer">
                    <p>This newsletter was automatically generated by your AI news bot.</p>
                    <p>Stay informed, stay ahead! ðŸš€</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        return html_content
    
    def send_email(self, articles: List[Dict], intro: str = "", categories: Dict[str, List[Dict]] = None) -> bool:
        if not all([self.email_address, self.email_password, self.recipient_email]):
            print("Error: Email configuration incomplete. Please check your .env file.")
            return False
        
        try:
            msg = MIMEMultipart('alternative')
            msg['From'] = self.email_address
            msg['To'] = self.recipient_email
            msg['Subject'] = f"ðŸ¤– Daily Dose of Tech - {datetime.now().strftime('%m/%d/%Y')}"
            
            html_content = self.create_html_email(articles, intro, categories or {})
            
            html_part = MIMEText(html_content, 'html')
            msg.attach(html_part)
            
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.email_address, self.email_password)
            
            text = msg.as_string()
            server.sendmail(self.email_address, self.recipient_email, text)
            server.quit()
            
            print(f"Email sent successfully to {self.recipient_email}")
            return True
            
        except Exception as e:
            print(f"Error sending email: {e}")
            return False
    
    def preview_email(self, articles: List[Dict], intro: str = "", categories: Dict[str, List[Dict]] = None):
        html_content = self.create_html_email(articles, intro, categories or {})
        
        with open('/tmp/email_preview.html', 'w') as f:
            f.write(html_content)
        
        print("Email preview saved to /tmp/email_preview.html")
        print(f"Subject: ðŸ¤– Daily Dose of Tech - {datetime.now().strftime('%m/%d/%Y')}")
        print(f"To: {self.recipient_email}")
        print(f"Articles: {len(articles)}")

if __name__ == "__main__":
    from news_aggregator import NewsAggregator
    from ai_summarizer import AISummarizer
    
    aggregator = NewsAggregator()
    articles = aggregator.get_latest_news()
    
    summarizer = AISummarizer()
    intro = summarizer.generate_newsletter_intro(len(articles))
    categories = summarizer.categorize_articles(articles)
    
    sender = EmailSender()
    sender.preview_email(articles[:10], intro, categories)
    
    print("\\nTo send the email, make sure your .env file is configured and run:")
    print("sender.send_email(articles[:10], intro, categories)")